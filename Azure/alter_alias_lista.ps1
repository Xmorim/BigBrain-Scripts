# Script para alterar alias de usu√°rios usando Exchange Online PowerShell
# Este √© o m√©todo CORRETO para alterar ProxyAddresses

# =====================================================
# VERIFICAR/INSTALAR M√ìDULO EXCHANGE ONLINE
# =====================================================
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "ALTERA√á√ÉO DE ALIAS - EXCHANGE ONLINE" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan

# Verificar se o m√≥dulo est√° instalado
Write-Host "`nVerificando m√≥dulo Exchange Online..." -ForegroundColor Yellow
if (Get-Module -ListAvailable -Name ExchangeOnlineManagement) {
    Write-Host "‚úì M√≥dulo Exchange Online Management encontrado" -ForegroundColor Green
} else {
    Write-Host "‚úó M√≥dulo n√£o encontrado. Instalando..." -ForegroundColor Red
    try {
        Install-Module -Name ExchangeOnlineManagement -Force -Scope CurrentUser
        Write-Host "‚úì M√≥dulo instalado com sucesso!" -ForegroundColor Green
    } catch {
        Write-Host "‚úó Erro ao instalar m√≥dulo: $_" -ForegroundColor Red
        Write-Host "Execute manualmente: Install-Module -Name ExchangeOnlineManagement" -ForegroundColor Yellow
        exit 1
    }
}

# Importar m√≥dulo
Import-Module ExchangeOnlineManagement -Force

# =====================================================
# CONECTAR AO EXCHANGE ONLINE
# =====================================================
Write-Host "`nConectando ao Exchange Online..." -ForegroundColor Yellow
try {
    # Verificar se j√° est√° conectado
    $existingSession = Get-PSSession | Where-Object { $_.ConfigurationName -eq "Microsoft.Exchange" -and $_.State -eq "Opened" }
    
    if ($existingSession) {
        Write-Host "‚úì J√° conectado ao Exchange Online" -ForegroundColor Green
    } else {
        Connect-ExchangeOnline -ShowBanner:$false
        Write-Host "‚úì Conectado com sucesso ao Exchange Online!" -ForegroundColor Green
    }
} catch {
    Write-Host "‚úó Erro ao conectar: $_" -ForegroundColor Red
    exit 1
}

# =====================================================
# CONFIGURA√á√ÉO - USU√ÅRIOS PARA ALTERAR
# =====================================================
$usuariosParaAlterar = @(
    "user@dominio.com",
    "user@dominio.com",
    "user@dominio.com"
)

$oldAliasDomain = "@edu.externatost.onmicrosoft.com"
$newAliasDomain = "@externatost.onmicrosoft.com"
$logFile = "Alteracao_Alias_Exchange_$(Get-Date -Format 'yyyyMMdd_HHmmss').csv"
$logEntries = @()

Write-Host "`nTotal de usu√°rios para processar: $($usuariosParaAlterar.Count)" -ForegroundColor Yellow
Write-Host "Alterando de: $oldAliasDomain" -ForegroundColor Yellow
Write-Host "Para: $newAliasDomain" -ForegroundColor Yellow
Write-Host ""

# =====================================================
# PROCESSAR CADA USU√ÅRIO
# =====================================================
foreach ($userEmail in $usuariosParaAlterar) {
    Write-Host "========================================" -ForegroundColor Cyan
    Write-Host "Processando: $userEmail" -ForegroundColor Cyan
    
    try {
        # Obter informa√ß√µes da caixa de correio
        $mailbox = Get-Mailbox -Identity $userEmail -ErrorAction Stop
        
        if ($null -eq $mailbox) {
            Write-Host "‚úó Caixa de correio n√£o encontrada" -ForegroundColor Red
            $logEntries += [PSCustomObject]@{
                Usuario = $userEmail
                Status = "N√£o encontrado"
                AliasAntigo = "N/A"
                AliasNovo = "N/A"
                Erro = "Caixa de correio n√£o encontrada"
                DataHora = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            }
            continue
        }
        
        Write-Host "‚úì Caixa de correio encontrada: $($mailbox.DisplayName)" -ForegroundColor Green
        
        # Listar aliases atuais
        Write-Host "`nAliases atuais:" -ForegroundColor Gray
        foreach ($email in $mailbox.EmailAddresses) {
            if ($email -like "*$oldAliasDomain") {
                Write-Host "  - $email [SER√Å ALTERADO]" -ForegroundColor Yellow
            } else {
                Write-Host "  - $email" -ForegroundColor Gray
            }
        }
        
        # Encontrar aliases que precisam ser alterados
        $aliasesToChange = $mailbox.EmailAddresses | Where-Object { $_ -like "*$oldAliasDomain" }
        
        if ($aliasesToChange.Count -eq 0) {
            Write-Host "`n‚úì Nenhum alias com $oldAliasDomain encontrado" -ForegroundColor Green
            
            # Verificar se j√° tem o novo alias
            $hasNewAlias = $mailbox.EmailAddresses | Where-Object { $_ -like "*$newAliasDomain" }
            if ($hasNewAlias) {
                Write-Host "‚úì Usu√°rio j√° possui alias(es) com $newAliasDomain" -ForegroundColor Green
            }
            
            $logEntries += [PSCustomObject]@{
                Usuario = $userEmail
                Status = "Sem altera√ß√µes necess√°rias"
                AliasAntigo = "N/A"
                AliasNovo = "N/A"
                EmailAddresses = ($mailbox.EmailAddresses -join ";")
                DataHora = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            }
            continue
        }
        
        # Preparar altera√ß√µes
        $addAddresses = @()
        $removeAddresses = @()
        
        foreach ($oldAlias in $aliasesToChange) {
            # Criar novo alias substituindo o dom√≠nio
            $newAlias = $oldAlias -replace [regex]::Escape($oldAliasDomain), $newAliasDomain
            
            $removeAddresses += $oldAlias
            $addAddresses += $newAlias
            
            Write-Host "`nAlterando:" -ForegroundColor Yellow
            Write-Host "  DE: $oldAlias" -ForegroundColor Red
            Write-Host "  PARA: $newAlias" -ForegroundColor Green
        }
        
        # Executar altera√ß√£o
        Write-Host "`nAplicando altera√ß√µes..." -ForegroundColor Yellow
        
        try {
            Set-Mailbox -Identity $userEmail `
                       -EmailAddresses @{Add=$addAddresses; Remove=$removeAddresses} `
                       -ErrorAction Stop
            
            Write-Host "‚úÖ Altera√ß√µes aplicadas com sucesso!" -ForegroundColor Green
            
            # Verificar altera√ß√µes (aguardar um pouco para propaga√ß√£o)
            Start-Sleep -Seconds 2
            $updatedMailbox = Get-Mailbox -Identity $userEmail
            
            Write-Host "`nAliases ap√≥s altera√ß√£o:" -ForegroundColor Gray
            foreach ($email in $updatedMailbox.EmailAddresses) {
                if ($email -in $addAddresses) {
                    Write-Host "  - $email [NOVO]" -ForegroundColor Green
                } else {
                    Write-Host "  - $email" -ForegroundColor Gray
                }
            }
            
            # Adicionar ao log
            $logEntries += [PSCustomObject]@{
                Usuario = $userEmail
                DisplayName = $mailbox.DisplayName
                Status = "Sucesso"
                AliasesRemovidos = ($removeAddresses -join ";")
                AliasesAdicionados = ($addAddresses -join ";")
                EmailAddressesAtuais = ($updatedMailbox.EmailAddresses -join ";")
                DataHora = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            }
            
        } catch {
            Write-Host "‚ùå Erro ao aplicar altera√ß√µes: $_" -ForegroundColor Red
            
            $logEntries += [PSCustomObject]@{
                Usuario = $userEmail
                DisplayName = $mailbox.DisplayName
                Status = "Erro"
                AliasesRemovidos = ($removeAddresses -join ";")
                AliasesAdicionados = "N/A"
                Erro = $_.Exception.Message
                DataHora = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            }
        }
        
    } catch {
        Write-Host "‚ùå Erro ao processar usu√°rio: $_" -ForegroundColor Red
        
        $logEntries += [PSCustomObject]@{
            Usuario = $userEmail
            Status = "Erro"
            Erro = $_.Exception.Message
            DataHora = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        }
    }
}

# =====================================================
# SALVAR LOG E EXIBIR RESUMO
# =====================================================
Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "RESUMO FINAL" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan

# Exportar log
if ($logEntries.Count -gt 0) {
    $logEntries | Export-Csv -Path $logFile -NoTypeInformation -Encoding UTF8
    Write-Host "üìÑ Log detalhado salvo em: $logFile" -ForegroundColor Green
}

# Estat√≠sticas
$sucessos = ($logEntries | Where-Object { $_.Status -eq "Sucesso" }).Count
$erros = ($logEntries | Where-Object { $_.Status -eq "Erro" }).Count
$semAlteracoes = ($logEntries | Where-Object { $_.Status -eq "Sem altera√ß√µes necess√°rias" }).Count
$naoEncontrados = ($logEntries | Where-Object { $_.Status -eq "N√£o encontrado" }).Count

Write-Host "`nEstat√≠sticas:" -ForegroundColor White
Write-Host "  Total processado: $($usuariosParaAlterar.Count)" -ForegroundColor White
Write-Host "  ‚úÖ Alterados com sucesso: $sucessos" -ForegroundColor Green
Write-Host "  ‚ÑπÔ∏è  Sem altera√ß√µes necess√°rias: $semAlteracoes" -ForegroundColor Yellow
Write-Host "  ‚ùå Erros: $erros" -ForegroundColor Red
Write-Host "  ‚ùì N√£o encontrados: $naoEncontrados" -ForegroundColor Red

# Mostrar sucessos
if ($sucessos -gt 0) {
    Write-Host "`n‚úÖ Usu√°rios alterados com sucesso:" -ForegroundColor Green
    $logEntries | Where-Object { $_.Status -eq "Sucesso" } | ForEach-Object {
        Write-Host "  - $($_.Usuario) ($($_.DisplayName))" -ForegroundColor Green
        Write-Host "    Removido: $($_.AliasesRemovidos)" -ForegroundColor Gray
        Write-Host "    Adicionado: $($_.AliasesAdicionados)" -ForegroundColor Gray
    }
}

# Mostrar erros
if ($erros -gt 0) {
    Write-Host "`n‚ùå Erros encontrados:" -ForegroundColor Red
    $logEntries | Where-Object { $_.Status -eq "Erro" } | ForEach-Object {
        Write-Host "  - $($_.Usuario): $($_.Erro)" -ForegroundColor Red
    }
}

Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "Processamento conclu√≠do!" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan

# Desconectar do Exchange Online
Write-Host "`nDesconectando do Exchange Online..." -ForegroundColor Yellow
Disconnect-ExchangeOnline -Confirm:$false -ErrorAction SilentlyContinue
Write-Host "‚úì Desconectado" -ForegroundColor Green